# Regular expression used to be processed by REname

# To get basic notions in Regular expressions: https://regexone.com/
# More about regular expression: https://www.regular-expressions.info/tutorial.html

# Each section behaves as a processing unit applied on the compound name.
# Every section contains two parameters:
    # regex = Regular expression applied to the compound name
    # replace = Characters that will replace the string "captured" by regex

[Synonyms]
Synonyms_regex = (;|\s/\s)(\n|.)*$
Synonyms_replace = 

[MixtureOfIsomers1]
# 2-Methyl-3 or 5 or 6-(furfurylthio)pyrazine (mixture of isomers) --> 2-Methyl-3-(furfurylthio)pyrazine (mixture of isomers)
# https://regex101.com/r/LoFknK/1
MixtureOfIsomers1_regex = ((?:^|-)\d+)(\sor\s\d+)+(?=-)
MixtureOfIsomers1_replace = \1

[MixtureOfIsomers2]
# 2-Methyl-3-(furfurylthio)pyrazine (mixture of isomers) --> 2-Methyl-3-(furfurylthio)pyrazine
MixtureOfIsomers1_regex = \s\(mixture of isomers\)$
MixtureOfIsomers1_replace = 

[CommaFattyAcid]
# Convert Tetracosahexaenoic acid, n-3 --> Tetracosahexaenoic acid
CommaFattyAcid_regex = ,\s[nN]-\d+$
CommaFattyAcid_replace = 

[FMByproduct]
# Remove final letters of fungal and microbial by-products
# https://regex101.com/r/pu6VKX/2
FMByproduct_regex = (?<![Vv]itamin)(?<![Cc]oenzyme)\s(?![Aa]cid)[A-Za-z0-9]{1,2}[0-9]{0,2}$
FMByproduct_replace = 

[BracketNumber]
# Remove brackets containing numbers
# https://regex101.com/r/yiOkKn/2
BracketNumber_regex = (-?)\[\d(\.\d)*\]-?
BracketNumber_replace = \1

[RomanNumber]
# Remove roman number at the beginning of the compound
# https://regex101.com/r/1Rh6Ab/2
RomanNumber_regex = (?<=^)\(?[ivx]+\)?-|(?<!^)(?<=\s)\(?[ivx]+\)?-
RomanNumber_replace = 

[CompoundType]
# Remove 'Type [IVX]' string from compound names
# https://regex101.com/r/poDK6J/1
CompoundType_regex = (?i)type\s[ivx]+\s
CompoundType_replace = 

[ParenBegin3D]
# Remove information between ( ) at the begining of the compound name. It is
# replaced by nothing including the character after ')'
# https://regex101.com/r/rE3HIC/2
ParenBegin3D_regex = ^(\([ZERSDLaAbBnNOomp+\-±]([,/][ZERSDLaAbBnNOomp+\-±])*\)-)+
ParenBegin3D_replace = 

[ParenMiddle3D]
# Remove information between ( ) in the middle of the compound name. It is preceded
# by a dash or \s. It should be replaced by the character before '('. It is done in
# python as '\g<1>'. If it is preceded by a number, it does not match
# https://regex101.com/r/yvx9gV/5
ParenMiddle3D_regex = (?<!\d)([-\s]?)\([ZERSDLaAbBnNOomp+\-±]([,/][ZERSDLaAbBnNOomp+\-±])*\)-?
ParenMiddle3D_replace = \1

[ParenMiddle3DNumber]
# It is similar to previous one. In this case, if there is a number preceeding the
# ( ), there is a match. However, the replacement is now by: \g<3> == \W
# https://regex101.com/r/hCzJNI/2
ParenMiddle3DNumber_regex = (?<=\d)([-\s]?)\([ZERSDLaAbBnNOomp+\-±]([,/][ZERSDLaAbBnNOomp+\-±])*\)(\W)?
ParenMiddle3DNumber_replace = \3

[NonParenBegin3D]
# Remove information at the beginning of the compound name when it is not between ( ).
# https://regex101.com/r/tCCHSN/6
NonParenBegin3D_regex = ^(([ZERSDLaAbBnNOomp+\-±][,/]?)+?(?=[-\(])-?)+(?!P[ACEGIS]$)(?!-P[ACEGIS]$)
NonParenBegin3D_replace = 

[NonParenMiddle3D]
# Remove information that is not between ( ) in the middle of the compound.
# https://regex101.com/r/9nK2MH/6
NonParenMiddle3D_regex = ([-\s])[ZERSDLaAbBnNOomp+\-±]([,/]?[ZERSDLaAbBnNOomp+\-±])*-
NonParenMiddle3D_replace = \1

[ParenDash3D]
# Remove information located between '(' and '-'.
# https://regex101.com/r/tXyIpr/2
ParenDash3D_regex = (?<=\()[ZERSDLaAbBnNOomp+\-±]([,\s]{0,2}[ZERSDLaAbBnNOomp+\-±])*-
ParenDash3D_replace = 

[NonParenBegin3DWords]
# Remove information at the beginning without parenthesis
# https://regex101.com/r/9mPx7Y/2
NonParenBegin3DWords_regex = (?i)^(((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+-)+
NonParenBegin3DWords_replace = 

[NonParenMiddle3DWords]
# Remove information in the middle of the name. It is replaced by a dash '-'
# https://regex101.com/r/qNK17I/5/
NonParenMiddle3DWords_regex = (?i)[-\s](((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+[-\s])+
NonParenMiddle3DWords_replace = -

[ParenMiddle3DWords]
# Remove information in the middle inside ( ). It is replaced by nothing.
# https://regex101.com/r/Xb6gr3/5/
ParenMiddle3DWords_regex = (?i)(?<=^)\(((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+\)-?|(?<!^)\(((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+\)
ParenMiddle3DWords_replace = 

[ParenDash3DWords]
# Remove information between '(' and '-'. It is replaced by nothing.
# https://regex101.com/r/ePUhNM/2
ParenDash3DWords_regex = (?i)(?<=\()((alpha|beta|α|ß|gamma|delta|cis|trans|sn|endo|exo),?\s?)+-
ParenDash3DWords_replace = 

[ParenParenMiddleNumber]
# Remove parenthesis that only contains numbers. We perform a look behind
# to see if there is a digit behind '('. In that case, we replace by nothing.
# https://regex101.com/r/DbNpmL/2
ParenParenMiddleNumber_regex = (?<=\d)\(([^-\s()[\]{}:\/\d]*\d)+[^-\s()[\]{}:\/\d]*\)(?<!Me\))
ParenParenMiddleNumber_replace = 

[NumberBegin]
# Remove ismoeric information at the beginning of the compound, identified
# by presence of numbers
# This is removed (replaced by nothing)
# https://regex101.com/r/7k0vNO/6
NumberBegin_regex = ^(([^-()[\]{}\s:\/\d]*(,\s)?\d+)+[^-()[\]{}\s:\/\d]*-)+
NumberBegin_replace = 

[NumberMiddle]
# This is replaced by '-'
# https://regex101.com/r/TMbHFj/4
NumberMiddle_regex = ([-\s])(([^-()[\]{}\s:\/\d]*(?<!yl)[,\s]{0,2}\d+)+[^-()[\]{}\s:\/\d]*-)+
NumberMiddle_replace = \1

[ParenParenBegin]
# Remove isomeric information between parenthesis at the beginning of the
# compound name. It is identified by the presence of a number. 
# This is removed (replaced by nothing).
# https://regex101.com/r/IFyxm2/1
ParenParenBegin_regex = ^(\(([^-\s()[\]{}:\/\d]*(,\s)?\d)+[^-\s()[\]{}:\/\d]*\)\W?)+
ParenParenBegin_replace = 

[ParenParenMiddle]
# The same as ParenParenMiddleNumber, but in this case we ensure that there is not
# a number behind '('. In that case, it is removed the non alpha-numeric character
# after ')'.
# https://regex101.com/r/XWQdls/3
ParenParenMiddle_regex = (?<!^CE)(?<!^CE\(MonoMe)(?<!^CE\(DiMe)(?<!\d)\(([^-\s()[\]{}:\/\d]*[,\s]{0,2}\d)+[^-\s()[\]{}:\/\d]*(-b)?\)[^\w)]?
ParenParenMiddle_replace = 

[ParenDash]
# Remove isomeric information between opening '(' '[' and '{' and dash '-'. The
# openning character is maintained.
# https://regex101.com/r/6Mw4om/1
ParenDash_regex = (?<=[\(\[\{])([^-()[\]{}\s:\/\d]*\d)+[^-()[\]{}\s:\/\d]*-(?!\))
ParenDash_replace = 

[AcidToSalt]
# Parse acid names to salt
# https://regex101.com/r/HuZc7y/1
AcidToSalt_regex = (?i)ic acid
AcidToSalt_replace = ate

[FattyAcid]
# Parse fatty acids letting just numbers preceded by C (C18:1...)
# https://regex101.com/r/U5mEpI/2
FattyAcid_regex = ^C?(\d+:\d+(?:\(\d+Me\))?)(?!\s\w)
FattyAcid_replace = C\1

[FattyAcidMe]
# Remove number next to Me in fatty acids
# https://regex101.com/r/noTllZ/1
FattyAcidMe_regex = (?<=^C\d\d:\d)\(\d+(Me)\)
FattyAcidMe_replace = (\1)